# Pred. biomass plot
#--------------------
# determine k to use for red line in b/k plot
if(FullSchaefer==T)  {k2use <- k.jags} else {k2use <- k.est}
# determine hight of y-axis in plot
max.y  <- max(c(ifelse(btype=="biomass",max(bt/k2use,na.rm=T),NA),
ifelse(btype=="CPUE",max(bt/(mean.q*k2use),na.rm=T),NA),
max(ucl.btv),0.6,startbio[2], endbio[2]),
ifelse(FullSchaefer==T & btype=="biomass",max(bt[is.na(bt)==F]/lcl.k.jags,na.rm=T),NA),
ifelse(FullSchaefer==T & btype=="CPUE",1.1*max(bt/(mean.q*lcl.k.jags),na.rm=T),NA), na.rm=T)
# Main plot of relative CMSY biomass
plot(x=yr,y=median.btv[1:nyr], lwd=1.5, xlab="Year", ylab="Relative biomass B/k", type="l",
ylim=c(0,max.y), bty="l", main="D: Biomass",col="blue")
lines(x=yr, y=lcl.btv[1:nyr],type="l",lty="dotted",col="blue")
lines(x=yr, y=ucl.btv[1:nyr],type="l",lty="dotted",col="blue")
# plot lines for 0.5 and 0.25 biomass
abline(h=0.5, lty="dashed")
abline(h=0.25, lty="dotted")
# plot biomass windows
lines(x=c(yr[1],yr[1]), y=startbio, col="blue")
lines(x=c(int.yr,int.yr), y=intbio, col="blue")
lines(x=c(max(yr),max(yr)), y=endbio, col="blue")
# if observed biomass is available, plot red biomass line (use non-smoothed bt)
if(btype=="biomass" & FullSchaefer==T) {
lines(x=yr, y=bt/k.jags,type="l", col="red", lwd=1)
lines(x=yr, y=bt/ucl.k.jags,type="l",col="red",lty="dotted")
lines(x=yr, y=bt/lcl.k.jags,type="l",col="red",lty="dotted")
}
# if observed CPUE is available, plot red biomass line
if(btype=="CPUE" & FullSchaefer==T) {
lines(x=yr, y=bt/(mean.q*k.jags),type="l", col="red", lwd=1)
lines(x=yr, y=bt/(mean.q*ucl.k.jags),type="l",col="red",lty="dotted")
lines(x=yr, y=bt/(mean.q*lcl.k.jags),type="l",col="red",lty="dotted")
}
# if biomass or CPUE data are available but fewer than 5 years, plot on second axis
if(btype != "None" & FullSchaefer==F) {
par(new=T) # prepares for new plot on top of previous
plot(x=yr, y=bt, type="l", col="red", lwd=1,
ann=F,axes=F,ylim=c(0,1.2*max(bt, na.rm=T))) # forces this plot on top of previous one
axis(4, col="red", col.axis="red")
}
# Exploitation rate plot
# -------------------------
# if CPUE data are available but fewer than nab years, plot on second axis
if(btype == "CPUE") {
q=1/(max(median.btv[1:nyr][is.na(bt)==F],na.rm=T)*k.est/max(bt,na.rm=T))
u.cpue      <- q*ct/bt
}
# determine upper bound of Y-axis
max.y <- max(c(1.5, 1.2*F.CMSY/Fmsy.CMSY,max(F.CMSY/Fmsy.CMSY),
ifelse(btype=="biomass" & FullSchaefer==T,max(F.bt[is.na(F.bt)==F]/Fmsy.bt),0),
ifelse(FullSchaefer==T & btype=="CPUE",max(F.bt.cpue/Fmsy.cpue,na.rm=T),0),
na.rm=T))
# plot F from CMSY
plot(x=yr,y=F.CMSY/Fmsy.CMSY, type="l", bty="l", lwd=1.5, ylim=c(0,max.y), xlab="Year",
ylab="F / (r/2)", main="E: Exploitation rate", col="blue")
abline(h=1, lty="dashed")
# plot F from observed biomass
if(btype == "biomass" & FullSchaefer==T) lines(x=yr, y=F.bt/Fmsy.bt, col="red")
# plot F from observed CPUE
if(FullSchaefer==T & btype == "CPUE") lines(x=yr, y=F.bt.cpue/Fmsy.cpue, col="red")
# plot F from CPUE on second axis if less than 5 years
if(FullSchaefer==F & btype == "CPUE") {
par(new=T) # prepares for new plot on top of previous
plot(x=yr, y=F.bt.cpue, type="l", col="red", ylim=c(0, 1.2*max(F.bt.cpue,na.rm=T)),ann=F,axes=F)
axis(4, col="red", col.axis="red")
}
# Parabola plot
#-------------------------
max.y <- max(c(max(ct/MSY.est),ifelse(btype=="biomass",max(ct/MSY.jags),NA),1.2),na.rm=T)
# plot parabola
x=seq(from=0,to=2,by=0.001)
y.c  <- ifelse(x>0.25,1,ifelse(x>0.125,4*x,exp(-10*(0.125-x))*4*x)) # correction for low recruitment below half and below quarter of Bmsy
y=(4*x-(2*x)^2)*y.c
plot(x=x, y=y, xlim=c(1,0), ylim=c(0,max.y), type="l", bty="l",xlab="Relative biomass B/k",
ylab="Catch / MSY", main="F: Equilibrium curve")
# plot catch against CMSY estimates of relative biomass
points(x=median.btv[1:nyr], y=ct/MSY.est, pch=16, col="blue")
# plot catch scaled by BSM MSY against observed biomass scaled by BSM k
if(btype == "biomass") {
points(x=bt/k.jags, y=ct/MSY.jags, pch=16, cex=0.5, col="red")
}
# for CPUE, plot catch scaled by BSM MSY against observed biomass derived as q * CPUE scaled by BSM k
if(FullSchaefer==T & btype=="CPUE") {
points(x=bt/(mean.q*k.jags), y=ct/MSY.jags, pch=16, cex=0.5, col="red")
}
#save analytic chart to JPEG file
if (save.plots==TRUE)
{
jpgfile<-paste(stock,"_AN.jpeg",sep="")
dev.copy(jpeg,jpgfile,
width = 1024,
height = 768,
units = "px",
pointsize = 18,
quality = 95,
res=80,
antialias="cleartype")
dev.off()
}
#---------------------------------------------
# Plot Management-Graphs if desired
#---------------------------------------------
if(mgraphs==T) {
# open window for plot of four panels
if(grepl("win",tolower(Sys.info()['sysname']))) {windows(14,12)}
par(mfrow=c(2,2))
# make margins narrower
par(mar=c(3.1,4.1,2.1,2.1))
#---------------------
# plot catch with MSY
#---------------------
max.y <- max(c(1.1*max(ct.raw),ucl.MSY),na.rm=T)
plot(x=yr,rep(0,nyr),type="n",ylim=c(0,max.y), bty="l", main=paste("Catch",stock),
ylab="Catch in 1000 t")
rect(yr[1],lcl.MSY,yr[nyr],ucl.MSY,col="lightgray", border=NA)
lines(x=c(yr[1],yr[nyr]),y=c(MSY,MSY),lty="dashed", col="black", lwd=1.5)
lines(x=yr, y=ct.raw, lwd=2)
text("MSY",x=end.yr-1.5, y=MSY+MSY*0.1)
#----------------------------------------
# plot estimated biomass relative to Bmsy
#----------------------------------------
# plot empty frame
plot(yr, rep(0,nyr),type="n", ylim=c(0,max(c(2, max(ucl.B.Bmsy)))), ylab="B / Bmsy",xlab="Year", main="Biomass", bty="l")
# plot gray area of uncertainty in predicted biomass
polygon(c(yr,rev(yr)), c(lcl.B.Bmsy,rev(ucl.B.Bmsy)),col="lightgray", border=NA)
# plot median biomass
lines(yr,B.Bmsy,lwd=2)
# plot lines for Bmsy and 0.5 Bmsy
lines(x=c(yr[1],yr[nyr]),y=c(1,1), lty="dashed", lwd=1.5)
lines(x=c(yr[1],yr[nyr]),y=c(0.5,0.5), lty="dotted", lwd=1.5)
# plot exploitation rate
# -------------------------
# plot empty frame
plot(yr, rep(0,nyr),type="n", ylim=c(0,max(c(2, ifelse(max(ucl.F.Fmsy)<5,max(ucl.F.Fmsy),5)))),
ylab="F / Fmsy",xlab="Year", main="Exploitation", bty="l")
# plot gray area of uncertainty in predicted exploitation
polygon(c(yr,rev(yr)), c(lcl.F.Fmsy,rev(ucl.F.Fmsy)),col="lightgray", border=NA)
# plot median exploitation rate
lines(x=yr,y=F.Fmsy,lwd=2)
# plot line for u.msy
lines(x=c(yr[1],yr[nyr]),y=c(1,1), lty="dashed", lwd=1.5)
#><>><>><>><>><>><>><>><>><>><>><>><>><>><>><>><>
# plot stock-status graph
#---------------------------
if(FullSchaefer==T & force.cmsy==F) {x.F_Fmsy = all.F_Fmsy[,nyr]
y.b_bmsy = all.b_bmsy[,nyr]} else {
log.sd.B.Bmsy = (log(ucl.B.Bmsy.last+0.0011)-log(lcl.B.Bmsy.last+0.001))/(2*1.96)
log.sd.F.Fmsy = (log(ucl.F.Fmsy.last+0.005)-log(lcl.F.Fmsy.last+0.001))/(2*1.96)
x.F_Fmsy= rlnorm(20000,log(F.Fmsy.last+0.001),log.sd.F.Fmsy)
y.b_bmsy =rlnorm(20000,log(B.Bmsy.last+0.001),log.sd.B.Bmsy)
}
kernelF <- ci2d(x.F_Fmsy,y.b_bmsy,nbins=201,factor=2.2,ci.levels=c(0.50,0.80,0.75,0.90,0.95),show="none")
c1 <- c(-1,100)
c2 <- c(1,1)
max.x1   <- max(c(2, max(kernelF$contours$"0.95"$x,ucl.F.Fmsy.last),na.rm =T))
max.x    <- ifelse(max.x1 > 5,min(max(5,F.Fmsy*2),8),max.x1)
max.y    <- max(max(2,quantile(y.b_bmsy,0.96)))
#Create plot
plot(1000,1000,type="b", xlim=c(0,max.x), ylim=c(0,max.y),lty=3,xlab="",ylab="", bty="l")
mtext("F / Fmsy",side=1, line=2)
mtext("B / Bmsy",side=2, line=2)
# extract interval information from ci2d object
# and fill areas using the polygon function
polygon(kernelF$contours$"0.95",lty=2,border=NA,col="cornsilk4")
polygon(kernelF$contours$"0.8",border=NA,lty=2,col="grey")
polygon(kernelF$contours$"0.5",border=NA,lty=2,col="cornsilk2")
## Add points and trajectory lines
lines(c1,c2,lty=3,lwd=0.7)
lines(c2,c1,lty=3,lwd=0.7)
lines(F.Fmsy,B.Bmsy, lty=1,lwd=1.)
points(F.Fmsy,B.Bmsy,cex=0.8,pch=4)
points(F.Fmsy[1],B.Bmsy[1],col=1,pch=22,bg="white",cex=1.9)
points(F.Fmsy[which(yr==int.yr)],B.Bmsy[which(yr==int.yr)],col=1,pch=21,bg="white",cex=1.9)
points(F.Fmsy[nyr],B.Bmsy[nyr],col=1,pch=24,bg="white",cex=1.9)
## Add legend
legend('topright', c(paste(start.yr),paste(int.yr),paste(end.yr),"50% C.I.","80% C.I.","95% C.I."),
lty=c(1,1,1,-1,-1,-1),pch=c(22,21,24,22,22,22),pt.bg=c(rep("white",3),"cornsilk2","grey","cornsilk4"),
col=1,lwd=1.1,cex=0.9,pt.cex=c(rep(1.3,3),1.7,1.7,1.7),bty="n",y.intersp = 0.9)
#><> End of Biplot
} # end of management graphs
# save management chart to JPEG file
if (save.plots==TRUE & mgraphs==TRUE)
{
jpgfile<-paste(stock,"_MAN.jpeg",sep="")
dev.copy(jpeg,jpgfile,
width = 1024,
height = 768,
units = "px",
pointsize = 18,
quality = 95,
res=80,
antialias="cleartype")
dev.off()
}
# -------------------------------------
## Write some results into csv outfile
# -------------------------------------
if(write.output == TRUE) {
# write data into csv file
output = data.frame(as.character(cinfo$Group[cinfo$Stock==stock]),
as.character(cinfo$Region[cinfo$Stock==stock]),
as.character(cinfo$Subregion[cinfo$Stock==stock]),
as.character(cinfo$Name[cinfo$Stock==stock]),
cinfo$ScientificName[cinfo$Stock==stock],
stock, start.yr, end.yr, btype,
max(ct.raw),ct.raw[nyr],
ifelse(FullSchaefer==T,MSY.jags,NA), # full Schaefer
ifelse(FullSchaefer==T,lcl.MSY.jags,NA),
ifelse(FullSchaefer==T,ucl.MSY.jags,NA),
ifelse(FullSchaefer==T,r.jags,NA),
ifelse(FullSchaefer==T,lcl.r.jags,NA),
ifelse(FullSchaefer==T,ucl.r.jags,NA),
ifelse(FullSchaefer==T,k.jags,NA),
ifelse(FullSchaefer==T,lcl.k.jags,NA),
ifelse(FullSchaefer==T,ucl.k.jags,NA),
ifelse(FullSchaefer==T & btype=="CPUE",mean.q,NA),
ifelse(FullSchaefer==T & btype=="CPUE",lcl.q,NA),
ifelse(FullSchaefer==T & btype=="CPUE",ucl.q,NA),
ifelse(FullSchaefer==T,quant.P[2,][nyr],NA), # last B/k JAGS
ifelse(FullSchaefer==T,quant.P[1,][nyr],NA),
ifelse(FullSchaefer==T,quant.P[3,][nyr],NA),
ifelse(FullSchaefer==T,(ct.raw[nyr]/(quant.P[2,][nyr]*k.jags))/(r.jags/2),NA), # last F/Fmsy JAGS
r.est, lcl.r.est, ucl.r.est, # CMSY r
k.est, lcl.k.est, ucl.k.est, # CMSY k
MSY.est, lcl.MSY.est, ucl.MSY.est, # CMSY MSY
median.btv.lastyr, lcl.median.btv.lastyr,ucl.median.btv.lastyr, # CMSY B/k in last year with catch data
(F.CMSY/Fmsy.CMSY)[nyr],
Fmsy,lcl.Fmsy,ucl.Fmsy,Fmsy.last,lcl.Fmsy.last,ucl.Fmsy.last,
MSY,lcl.MSY,ucl.MSY,Bmsy,lcl.Bmsy,ucl.Bmsy,
B.last, lcl.B.last, ucl.B.last, B.Bmsy.last, lcl.B.Bmsy.last, ucl.B.Bmsy.last,
F.last, lcl.F.last, ucl.F.last, F.Fmsy.last, lcl.F.Fmsy.last, ucl.F.Fmsy.last,
ifelse(is.na(sel.yr)==F,B.sel,NA),
ifelse(is.na(sel.yr)==F,B.Bmsy.sel,NA),
ifelse(is.na(sel.yr)==F,F.sel,NA),
ifelse(is.na(sel.yr)==F,F.Fmsy.sel,NA),
ifelse(yr[1]>2000,NA,ct.raw[yr==2000]),ifelse(yr[1]>2001,NA,ct.raw[yr==2001]),ifelse(yr[1]>2002,NA,ct.raw[yr==2002]), ifelse(yr[1]>2003,NA,ct.raw[yr==2003]),# allow missing 2000-2002
ct.raw[yr==2004],ct.raw[yr==2005],ct.raw[yr==2006],ct.raw[yr==2007],ct.raw[yr==2008],ct.raw[yr==2009],ct.raw[yr==2010],
ifelse(yr[nyr]<2011,NA,ct.raw[yr==2011]),ifelse(yr[nyr]<2012,NA,ct.raw[yr==2012]),ifelse(yr[nyr]<2013,NA,ct.raw[yr==2013]),ifelse(yr[nyr]<2014,NA,ct.raw[yr==2014]),ifelse(yr[nyr]<2015,NA,ct.raw[yr==2015]), # allow missing 2011-2015
ifelse(yr[1]>2000,NA,F.Fmsy[yr==2000]),ifelse(yr[1]>2001,NA,F.Fmsy[yr==2001]),ifelse(yr[1]>2002,NA,F.Fmsy[yr==2002]),ifelse(yr[1]>2003,NA,F.Fmsy[yr==2003]), # allow missing 2000-2002
F.Fmsy[yr==2004],F.Fmsy[yr==2005],F.Fmsy[yr==2006],F.Fmsy[yr==2007],F.Fmsy[yr==2008],F.Fmsy[yr==2009],F.Fmsy[yr==2010],
ifelse(yr[nyr]<2011,NA,F.Fmsy[yr==2011]),ifelse(yr[nyr]<2012,NA,F.Fmsy[yr==2012]),ifelse(yr[nyr]<2013,NA,F.Fmsy[yr==2013]),ifelse(yr[nyr]<2014,NA,F.Fmsy[yr==2014]),ifelse(yr[nyr]<2015,NA,F.Fmsy[yr==2015]),# allow missing 2011-2015
ifelse(yr[1]>2000,NA,B[yr==2000]),ifelse(yr[1]>2001,NA,B[yr==2001]),ifelse(yr[1]>2002,NA,B[yr==2002]),ifelse(yr[1]>2003,NA,B[yr==2003]), # allow missing 2000-2002
B[yr==2004],B[yr==2005],B[yr==2006],B[yr==2007],B[yr==2008],B[yr==2009],B[yr==2010],
ifelse(yr[nyr]<2011,NA,B[yr==2011]),ifelse(yr[nyr]<2012,NA,B[yr==2012]),ifelse(yr[nyr]<2013,NA,B[yr==2013]),ifelse(yr[nyr]<2014,NA,B[yr==2014]),ifelse(yr[nyr]<2015,NA,B[yr==2015])) # allow missing 2011-2015
write.table(output, file=outfile, append = T, sep = ",",
dec = ".", row.names = FALSE, col.names = FALSE)
# write screen text into text outfile.txt
cat("Species:", cinfo$ScientificName[cinfo$Stock==stock], ", stock:",stock,"\n",
cinfo$Name[cinfo$Stock==stock], "\n",
"Source:",cinfo$Source[cinfo$Stock==stock],"\n",
"Region:",cinfo$Region[cinfo$Stock==stock],",",cinfo$Subregion[cinfo$Stock==stock],"\n",
"Catch data used from years", min(yr),"-", max(yr),", abundance =", btype, "\n",
"Prior initial relative biomass =", startbio[1], "-", startbio[2],ifelse(is.na(stb.low)==T,"default","expert"), "\n",
"Prior intermediate rel. biomass=", intbio[1], "-", intbio[2], "in year", int.yr,ifelse(is.na(intb.low)==T,"default","expert"), "\n",
"Prior final relative biomass   =", endbio[1], "-", endbio[2],ifelse(is.na(endb.low)==T,", default","expert"), "\n",
"Prior range for r =", format(start.r[1],digits=2), "-", format(start.r[2],digits=2),ifelse(is.na(r.low)==T,"default","expert,"),
", prior range for k  =", start.k[1], "-", start.k[2],
file=outfile.txt,append=T)
if(FullSchaefer==T & btype=="CPUE") {
cat("\n Prior range of q =",q.prior[1],"-",q.prior[2],file=outfile.txt,append=T)
}
cat("\n\n Results of CMSY analysis with altogether",n.viable.b, "viable trajectories for", n.viable.pt,"r-k pairs \n",
"r =", r.est,", 95% CL =", lcl.r.est, "-", ucl.r.est,
", k =", k.est,", 95% CL =", lcl.k.est, "-", ucl.k.est,"\n",
"MSY =", MSY.est,", 95% CL =", lcl.MSY.est, "-", ucl.MSY.est,"\n",
"Relative biomass last year =", median.btv.lastyr, "k, 2.5th =", lcl.median.btv.lastyr,
", 97.5th =", ucl.median.btv.lastyr,"\n",
"Exploitation F/(r/2) in last year =", (F.CMSY/Fmsy.CMSY)[length(median.btv)-1],"\n",
file=outfile.txt,append=T)
if(FullSchaefer==T) {
cat("\n Results from Bayesian Schaefer model using catch &",btype,"\n",
"r =", r.jags,", 95% CL =", lcl.r.jags, "-", ucl.r.jags,
", k =", k.jags,", 95% CL =", lcl.k.jags, "-", ucl.k.jags,"\n",
"MSY =", MSY.jags,", 95% CL =", lcl.MSY.jags, "-", ucl.MSY.jags,"\n",
"Relative biomass in last year =", quant.P[2,][nyr], "k, 2.5th perc =",quant.P[1,][nyr],
", 97.5th perc =", quant.P[3,][nyr],"\n",
"Exploitation F/(r/2) in last year =", (ct.raw[nyr]/(quant.P[2,][nyr]*k.jags))/(r.jags/2) ,
file=outfile.txt,append=T)
if(btype == "CPUE") {cat("\n q =", mean.q,", lcl =", lcl.q, ", ucl =", ucl.q,
file=outfile.txt,append=T)}
}
cat("\n\n Results for Management (based on",ifelse(FullSchaefer==F | force.cmsy==T,"CMSY","BSM"),"analysis) \n",
"Fmsy =",Fmsy,", 95% CL =",lcl.Fmsy,"-",ucl.Fmsy,"(if B > 1/2 Bmsy then Fmsy = 0.5 r)\n",
"Fmsy =",Fmsy.last,", 95% CL =",lcl.Fmsy.last,"-",ucl.Fmsy.last,"(r and Fmsy are linearly reduced if B < 1/2 Bmsy)\n",
"MSY  =",MSY,",  95% CL =",lcl.MSY,"-",ucl.MSY,"\n",
"Bmsy =",Bmsy,",  95% CL =",lcl.Bmsy,"-",ucl.Bmsy,"\n",
"Biomass in last year  =",B.last,", 2.5th perc =", lcl.B.last, ", 97.5 perc =",ucl.B.last,"\n",
"B/Bmsy in last year   =",B.Bmsy.last,", 2.5th perc =", lcl.B.Bmsy.last, ", 97.5 perc =",ucl.B.Bmsy.last,"\n",
"Fishing mortality in last year =",F.last,", 2.5th perc =", lcl.F.last, ", 97.5 perc =",ucl.F.last,"\n",
"F/Fmsy  =",F.Fmsy.last,", 2.5th perc =", lcl.F.Fmsy.last, ", 97.5 perc =",ucl.F.Fmsy.last,"\n",
file=outfile.txt,append=T)
# show stock status and exploitation for optional selected year
if(is.na(sel.yr)==F) {
cat("\n Stock status and exploitation in",sel.yr,"\n",
"Biomass =",B.sel, ", B/Bmsy =",B.Bmsy.sel,", fishing mortality F =",F.sel,", F/Fmsy =",F.Fmsy.sel,"\n",
file=outfile.txt,append=T) }
if(btype !="None" & length(bt[is.na(bt)==F])<nab) {
cat(" Less than",nab,"years with abundance data available, shown on second axis\n",file=outfile.txt,append=T) }
cat(" Comment:", comment,"\n","----------------------------------------------------------\n\n",
file=outfile.txt,append=T)
} # end of loop to write text to file
if(close.plots==T) graphics.off() # close on-screen graphics windows after files are saved
} # end of stocks loop
##---------------------------------------------------------------------------------------------
## CMSY and BSM analysis
## Written by Rainer Froese, Gianpaolo Coro and Henning Winker
## Version of November 2016
## Note that time series excluding 2004 - 2010 will give an error in dataframe; set write.output <- F to avoid that error
## Version CMSY_O_7q.R
##---------------------------------------------------------------------------------------------
library(R2jags)  # Interface with JAGS
source('~/Documentos/github/jcquiroz/cmsy/CMSY_O_7q.R')
F.last
plot(x=rv.all, y=kv.all, xlim=start.r,
ylim=c(min.y,max.y),
pch=16, col="gray",log="xy", bty="l",
xlab="r", ylab="k", main="C: Analysis of viable r-k")
# plot r-k pairs from MCMC
if(FullSchaefer==T) {points(x=r_out, y=k_out, pch=16,cex=0.5)}
# plot best r-k from full Schaefer analysis
if(FullSchaefer==T) {
points(x=r.jags, y=k.jags, pch=19, col="red")
lines(x=c(lcl.r.jags, ucl.r.jags),y=c(k.jags,k.jags), col="red")
lines(x=c(r.jags,r.jags),y=c(lcl.k.jags, ucl.k.jags), col="red")
}
# plot blue dot for CMSY r-k, with 95% CL lines
points(x=r.est, y=k.est, pch=19, col="blue")
lines(x=c(lcl.r.est, ucl.r.est),y=c(k.est,k.est), col="blue")
lines(x=c(r.est,r.est),y=c(lcl.k.est, ucl.k.est), col="blue")
# Pred. biomass plot
#--------------------
# determine k to use for red line in b/k plot
if(FullSchaefer==T)  {k2use <- k.jags} else {k2use <- k.est}
# determine hight of y-axis in plot
max.y  <- max(c(ifelse(btype=="biomass",max(bt/k2use,na.rm=T),NA),
ifelse(btype=="CPUE",max(bt/(mean.q*k2use),na.rm=T),NA),
max(ucl.btv),0.6,startbio[2], endbio[2]),
ifelse(FullSchaefer==T & btype=="biomass",max(bt[is.na(bt)==F]/lcl.k.jags,na.rm=T),NA),
ifelse(FullSchaefer==T & btype=="CPUE",1.1*max(bt/(mean.q*lcl.k.jags),na.rm=T),NA), na.rm=T)
# Main plot of relative CMSY biomass
plot(x=yr,y=median.btv[1:nyr], lwd=1.5, xlab="Year", ylab="Relative biomass B/k", type="l",
ylim=c(0,max.y), bty="l", main="D: Biomass",col="blue")
lines(x=yr, y=lcl.btv[1:nyr],type="l",lty="dotted",col="blue")
lines(x=yr, y=ucl.btv[1:nyr],type="l",lty="dotted",col="blue")
# plot lines for 0.5 and 0.25 biomass
abline(h=0.5, lty="dashed")
abline(h=0.25, lty="dotted")
# plot biomass windows
lines(x=c(yr[1],yr[1]), y=startbio, col="blue")
lines(x=c(int.yr,int.yr), y=intbio, col="blue")
lines(x=c(max(yr),max(yr)), y=endbio, col="blue")
# if observed biomass is available, plot red biomass line (use non-smoothed bt)
if(btype=="biomass" & FullSchaefer==T) {
lines(x=yr, y=bt/k.jags,type="l", col="red", lwd=1)
lines(x=yr, y=bt/ucl.k.jags,type="l",col="red",lty="dotted")
lines(x=yr, y=bt/lcl.k.jags,type="l",col="red",lty="dotted")
}
# if observed CPUE is available, plot red biomass line
if(btype=="CPUE" & FullSchaefer==T) {
lines(x=yr, y=bt/(mean.q*k.jags),type="l", col="red", lwd=1)
lines(x=yr, y=bt/(mean.q*ucl.k.jags),type="l",col="red",lty="dotted")
lines(x=yr, y=bt/(mean.q*lcl.k.jags),type="l",col="red",lty="dotted")
}
# if biomass or CPUE data are available but fewer than 5 years, plot on second axis
if(btype != "None" & FullSchaefer==F) {
par(new=T) # prepares for new plot on top of previous
plot(x=yr, y=bt, type="l", col="red", lwd=1,
ann=F,axes=F,ylim=c(0,1.2*max(bt, na.rm=T))) # forces this plot on top of previous one
axis(4, col="red", col.axis="red")
}
# if CPUE data are available but fewer than nab years, plot on second axis
if(btype == "CPUE") {
q=1/(max(median.btv[1:nyr][is.na(bt)==F],na.rm=T)*k.est/max(bt,na.rm=T))
u.cpue      <- q*ct/bt
}
# determine upper bound of Y-axis
max.y <- max(c(1.5, 1.2*F.CMSY/Fmsy.CMSY,max(F.CMSY/Fmsy.CMSY),
ifelse(btype=="biomass" & FullSchaefer==T,max(F.bt[is.na(F.bt)==F]/Fmsy.bt),0),
ifelse(FullSchaefer==T & btype=="CPUE",max(F.bt.cpue/Fmsy.cpue,na.rm=T),0),
na.rm=T))
# plot F from CMSY
plot(x=yr,y=F.CMSY/Fmsy.CMSY, type="l", bty="l", lwd=1.5, ylim=c(0,max.y), xlab="Year",
ylab="F / (r/2)", main="E: Exploitation rate", col="blue")
abline(h=1, lty="dashed")
# plot F from observed biomass
if(btype == "biomass" & FullSchaefer==T) lines(x=yr, y=F.bt/Fmsy.bt, col="red")
# plot F from observed CPUE
if(FullSchaefer==T & btype == "CPUE") lines(x=yr, y=F.bt.cpue/Fmsy.cpue, col="red")
# plot F from CPUE on second axis if less than 5 years
if(FullSchaefer==F & btype == "CPUE") {
par(new=T) # prepares for new plot on top of previous
plot(x=yr, y=F.bt.cpue, type="l", col="red", ylim=c(0, 1.2*max(F.bt.cpue,na.rm=T)),ann=F,axes=F)
axis(4, col="red", col.axis="red")
}
# Parabola plot
#-------------------------
max.y <- max(c(max(ct/MSY.est),ifelse(btype=="biomass",max(ct/MSY.jags),NA),1.2),na.rm=T)
# plot parabola
x=seq(from=0,to=2,by=0.001)
y.c  <- ifelse(x>0.25,1,ifelse(x>0.125,4*x,exp(-10*(0.125-x))*4*x)) # correction for low recruitment below half and below quarter of Bmsy
y=(4*x-(2*x)^2)*y.c
plot(x=x, y=y, xlim=c(1,0), ylim=c(0,max.y), type="l", bty="l",xlab="Relative biomass B/k",
ylab="Catch / MSY", main="F: Equilibrium curve")
# plot catch against CMSY estimates of relative biomass
points(x=median.btv[1:nyr], y=ct/MSY.est, pch=16, col="blue")
# plot catch scaled by BSM MSY against observed biomass scaled by BSM k
if(btype == "biomass") {
points(x=bt/k.jags, y=ct/MSY.jags, pch=16, cex=0.5, col="red")
}
# for CPUE, plot catch scaled by BSM MSY against observed biomass derived as q * CPUE scaled by BSM k
if(FullSchaefer==T & btype=="CPUE") {
points(x=bt/(mean.q*k.jags), y=ct/MSY.jags, pch=16, cex=0.5, col="red")
}
#save analytic chart to JPEG file
if (save.plots==TRUE)
{
jpgfile<-paste(stock,"_AN.jpeg",sep="")
dev.copy(jpeg,jpgfile,
width = 1024,
height = 768,
units = "px",
pointsize = 18,
quality = 95,
res=80,
antialias="cleartype")
dev.off()
}
#---------------------------------------------
# Plot Management-Graphs if desired
#---------------------------------------------
if(mgraphs==T) {
# open window for plot of four panels
if(grepl("win",tolower(Sys.info()['sysname']))) {windows(14,12)}
par(mfrow=c(2,2))
# make margins narrower
par(mar=c(3.1,4.1,2.1,2.1))
#---------------------
# plot catch with MSY
#---------------------
max.y <- max(c(1.1*max(ct.raw),ucl.MSY),na.rm=T)
plot(x=yr,rep(0,nyr),type="n",ylim=c(0,max.y), bty="l", main=paste("Catch",stock),
ylab="Catch in 1000 t")
rect(yr[1],lcl.MSY,yr[nyr],ucl.MSY,col="lightgray", border=NA)
lines(x=c(yr[1],yr[nyr]),y=c(MSY,MSY),lty="dashed", col="black", lwd=1.5)
lines(x=yr, y=ct.raw, lwd=2)
text("MSY",x=end.yr-1.5, y=MSY+MSY*0.1)
#----------------------------------------
# plot estimated biomass relative to Bmsy
#----------------------------------------
# plot empty frame
plot(yr, rep(0,nyr),type="n", ylim=c(0,max(c(2, max(ucl.B.Bmsy)))), ylab="B / Bmsy",xlab="Year", main="Biomass", bty="l")
# plot gray area of uncertainty in predicted biomass
polygon(c(yr,rev(yr)), c(lcl.B.Bmsy,rev(ucl.B.Bmsy)),col="lightgray", border=NA)
# plot median biomass
lines(yr,B.Bmsy,lwd=2)
# plot lines for Bmsy and 0.5 Bmsy
lines(x=c(yr[1],yr[nyr]),y=c(1,1), lty="dashed", lwd=1.5)
lines(x=c(yr[1],yr[nyr]),y=c(0.5,0.5), lty="dotted", lwd=1.5)
# plot exploitation rate
# -------------------------
# plot empty frame
plot(yr, rep(0,nyr),type="n", ylim=c(0,max(c(2, ifelse(max(ucl.F.Fmsy)<5,max(ucl.F.Fmsy),5)))),
ylab="F / Fmsy",xlab="Year", main="Exploitation", bty="l")
# plot gray area of uncertainty in predicted exploitation
polygon(c(yr,rev(yr)), c(lcl.F.Fmsy,rev(ucl.F.Fmsy)),col="lightgray", border=NA)
# plot median exploitation rate
lines(x=yr,y=F.Fmsy,lwd=2)
# plot line for u.msy
lines(x=c(yr[1],yr[nyr]),y=c(1,1), lty="dashed", lwd=1.5)
#><>><>><>><>><>><>><>><>><>><>><>><>><>><>><>><>
# plot stock-status graph
#---------------------------
if(FullSchaefer==T & force.cmsy==F) {x.F_Fmsy = all.F_Fmsy[,nyr]
y.b_bmsy = all.b_bmsy[,nyr]} else {
log.sd.B.Bmsy = (log(ucl.B.Bmsy.last+0.0011)-log(lcl.B.Bmsy.last+0.001))/(2*1.96)
log.sd.F.Fmsy = (log(ucl.F.Fmsy.last+0.005)-log(lcl.F.Fmsy.last+0.001))/(2*1.96)
x.F_Fmsy= rlnorm(20000,log(F.Fmsy.last+0.001),log.sd.F.Fmsy)
y.b_bmsy =rlnorm(20000,log(B.Bmsy.last+0.001),log.sd.B.Bmsy)
}
kernelF <- ci2d(x.F_Fmsy,y.b_bmsy,nbins=201,factor=2.2,ci.levels=c(0.50,0.80,0.75,0.90,0.95),show="none")
c1 <- c(-1,100)
c2 <- c(1,1)
max.x1   <- max(c(2, max(kernelF$contours$"0.95"$x,ucl.F.Fmsy.last),na.rm =T))
max.x    <- ifelse(max.x1 > 5,min(max(5,F.Fmsy*2),8),max.x1)
max.y    <- max(max(2,quantile(y.b_bmsy,0.96)))
#Create plot
plot(1000,1000,type="b", xlim=c(0,max.x), ylim=c(0,max.y),lty=3,xlab="",ylab="", bty="l")
mtext("F / Fmsy",side=1, line=2)
mtext("B / Bmsy",side=2, line=2)
# extract interval information from ci2d object
# and fill areas using the polygon function
polygon(kernelF$contours$"0.95",lty=2,border=NA,col="cornsilk4")
polygon(kernelF$contours$"0.8",border=NA,lty=2,col="grey")
polygon(kernelF$contours$"0.5",border=NA,lty=2,col="cornsilk2")
## Add points and trajectory lines
lines(c1,c2,lty=3,lwd=0.7)
lines(c2,c1,lty=3,lwd=0.7)
lines(F.Fmsy,B.Bmsy, lty=1,lwd=1.)
points(F.Fmsy,B.Bmsy,cex=0.8,pch=4)
points(F.Fmsy[1],B.Bmsy[1],col=1,pch=22,bg="white",cex=1.9)
points(F.Fmsy[which(yr==int.yr)],B.Bmsy[which(yr==int.yr)],col=1,pch=21,bg="white",cex=1.9)
points(F.Fmsy[nyr],B.Bmsy[nyr],col=1,pch=24,bg="white",cex=1.9)
## Add legend
legend('topright', c(paste(start.yr),paste(int.yr),paste(end.yr),"50% C.I.","80% C.I.","95% C.I."),
lty=c(1,1,1,-1,-1,-1),pch=c(22,21,24,22,22,22),pt.bg=c(rep("white",3),"cornsilk2","grey","cornsilk4"),
col=1,lwd=1.1,cex=0.9,pt.cex=c(rep(1.3,3),1.7,1.7,1.7),bty="n",y.intersp = 0.9)
#><> End of Biplot
} # end of management graphs
source('~/Documentos/github/jcquiroz/cmsy/CMSY_O_7q_OnlineRStudio.R')
dev.off()
dev.off()
